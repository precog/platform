#!/usr/bin/python

import os, sys, subprocess

fake = False

def call(args):
    if fake:
        print args
    else:
        return subprocess.call(args)

class Service(object):
    @classmethod
    def frompath(self, path):
        d = {}
        for line in open(path, 'r'):
            toks = line.split()
            if len(toks) != 2: continue
            d[toks[0]] = toks[1]
        return Service(d)

    def __init__(self, d):
        self.basedir = d.get('basedir')
        self.accountid = d.get('id')
        self.apikey = d.get('token')

        self.accountsport = d.get('accounts')
        self.authport = d.get('auth')
        self.ingestport = d.get('ingest')
        self.jobsport = d.get('jobs')
        self.shardport = d.get('shard')

    def ingest(self, fspath, qpath):
        assert(os.path.exists(fspath))
        assert(not qpath.startswith('/'))
        url = "http://localhost:%s/sync/fs/%s/%s?apiKey=%s" % (self.ingestport, self.accountid, qpath, self.apikey)
        mime = 'Content-Type: application/json'
        #args = ['curl', '-v', '-H', mime, '--data-bin', "@" + fspath, url]
        args = ['curl', '-H', mime, '--data-bin', "@" + fspath, url]
        call(args)
        print ""
    
    def query(self, query):
        url = "http://localhost:%s/analytics/fs/%s" % (self.shardport, self.accountid)
        #args = ['curl', '-v', '-s', '-G',
        args = ['curl', '-s', '-G',
                #'-H', 'Accept-Encoding: gzip',
                '--data-urlencode', "q=" + query,
                '--data-urlencode', 'apiKey=' + self.apikey, url]
        call(args)
        print ""

def usage():
    prog = sys.argv[0]
    print "usage: %s -i FSPATH QPATH   # ingest data" % prog
    print "       %s -e QUERY          # run query" % prog
    print "       %s -e                # run query from stdin" % prog
    print "       %s -s [ARG1 ...]     # run subshell from tmpdir" % prog
    sys.exit(0)

if __name__ == "__main__":
    service = Service.frompath("shard.out")
    args = sys.argv[1:]
    if not args:
        usage()
    elif args[0] == '-i':
        service.ingest(args[1], args[2])
    elif args[0] == '-s':
        os.chdir(service.basedir)
        if args[1:]:
            os.execvp(args[1], args[1:])
        else:
            os.execlp('bash', 'bash')
    elif args[0] == '-e':
        if not args[1:]:
            q = sys.stdin.read()
        else:
            q = args[1]
        service.query(q)
    else:
        usage()
